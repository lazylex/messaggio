// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	uuid "github.com/google/uuid"
	message "github.com/lazylex/messaggio/internal/domain/value_objects/message"
	dto "github.com/lazylex/messaggio/internal/dto"
)

// MockInterface is a mock of Interface interface.
type MockInterface struct {
	ctrl     *gomock.Controller
	recorder *MockInterfaceMockRecorder
}

// MockInterfaceMockRecorder is the mock recorder for MockInterface.
type MockInterfaceMockRecorder struct {
	mock *MockInterface
}

// NewMockInterface creates a new mock instance.
func NewMockInterface(ctrl *gomock.Controller) *MockInterface {
	mock := &MockInterface{ctrl: ctrl}
	mock.recorder = &MockInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockInterface) EXPECT() *MockInterfaceMockRecorder {
	return m.recorder
}

// MarkMessageAsProcessed mocks base method.
func (m *MockInterface) MarkMessageAsProcessed(ctx context.Context, id uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkMessageAsProcessed", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkMessageAsProcessed indicates an expected call of MarkMessageAsProcessed.
func (mr *MockInterfaceMockRecorder) MarkMessageAsProcessed(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkMessageAsProcessed", reflect.TypeOf((*MockInterface)(nil).MarkMessageAsProcessed), ctx, id)
}

// MessageChan mocks base method.
func (m *MockInterface) MessageChan() chan dto.MessageID {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MessageChan")
	ret0, _ := ret[0].(chan dto.MessageID)
	return ret0
}

// MessageChan indicates an expected call of MessageChan.
func (mr *MockInterfaceMockRecorder) MessageChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MessageChan", reflect.TypeOf((*MockInterface)(nil).MessageChan))
}

// ProcessMessage mocks base method.
func (m *MockInterface) ProcessMessage(ctx context.Context, msg message.Message) (uuid.UUID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessMessage", ctx, msg)
	ret0, _ := ret[0].(uuid.UUID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessMessage indicates an expected call of ProcessMessage.
func (mr *MockInterfaceMockRecorder) ProcessMessage(ctx, msg interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessMessage", reflect.TypeOf((*MockInterface)(nil).ProcessMessage), ctx, msg)
}

// ProcessedCountStatistic mocks base method.
func (m *MockInterface) ProcessedCountStatistic(ctx context.Context) (dto.Processed, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessedCountStatistic", ctx)
	ret0, _ := ret[0].(dto.Processed)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ProcessedCountStatistic indicates an expected call of ProcessedCountStatistic.
func (mr *MockInterfaceMockRecorder) ProcessedCountStatistic(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessedCountStatistic", reflect.TypeOf((*MockInterface)(nil).ProcessedCountStatistic), ctx)
}

// SaveUnsentMessage mocks base method.
func (m *MockInterface) SaveUnsentMessage(arg0 dto.MessageID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveUnsentMessage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveUnsentMessage indicates an expected call of SaveUnsentMessage.
func (mr *MockInterfaceMockRecorder) SaveUnsentMessage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveUnsentMessage", reflect.TypeOf((*MockInterface)(nil).SaveUnsentMessage), arg0)
}

// Statistic mocks base method.
func (m *MockInterface) Statistic() dto.Statistic {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statistic")
	ret0, _ := ret[0].(dto.Statistic)
	return ret0
}

// Statistic indicates an expected call of Statistic.
func (mr *MockInterfaceMockRecorder) Statistic() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statistic", reflect.TypeOf((*MockInterface)(nil).Statistic))
}
